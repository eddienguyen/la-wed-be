/**
 * SQL-like Database Backup Script
 * 
 * Creates a SQL-format backup that can be used to restore the database.
 * Works around Supabase pooler limitations with pg_dump.
 */

import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const supabaseUrl = process.env.DATABASE_URL;

if (!supabaseUrl) {
  console.error('❌ Error: DATABASE_URL not found');
  process.exit(1);
}

const prisma = new PrismaClient({
  datasources: { db: { url: supabaseUrl } }
});

async function generateSQLBackup() {
  console.log('🔄 Creating SQL-format backup...\n');

  try {
    await prisma.$connect();
    console.log('✅ Connected to Supabase\n');

    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0];
    const filename = `supabase_backup_sql_${timestamp}_${Date.now()}.sql`;
    const filepath = path.join(__dirname, '..', 'backups', filename);

    let sqlContent = `-- Database Backup
-- Created: ${new Date().toISOString()}
-- Source: Supabase (opkvkiaaqjhlfmijyzer)
-- 
-- Tables: guests, rsvps
-- Generated by: backup-database-sql.js

BEGIN;

-- ==========================================
-- Table: guests
-- ==========================================

`;

    // Get guests
    console.log('📦 Backing up guests table...');
    const guests = await prisma.guest.findMany({
      orderBy: { createdAt: 'asc' }
    });
    console.log(`   Found ${guests.length} guests`);

    if (guests.length > 0) {
      sqlContent += `-- Guests data\n`;
      
      for (const guest of guests) {
        const values = [
          `'${guest.id}'`,
          `'${guest.name.replace(/'/g, "''")}'`,
          guest.secondaryNote ? `'${guest.secondaryNote.replace(/'/g, "''")}'` : 'NULL',
          `'${guest.venue}'`,
          `'${guest.invitationUrl.replace(/'/g, "''")}'`,
          `'${guest.createdAt.toISOString()}'`,
          `'${guest.updatedAt.toISOString()}'`,
          guest.invitationImageFrontUrl ? `'${guest.invitationImageFrontUrl.replace(/'/g, "''")}'` : 'NULL',
          guest.invitationImageMainUrl ? `'${guest.invitationImageMainUrl.replace(/'/g, "''")}'` : 'NULL'
        ].join(', ');

        sqlContent += `INSERT INTO guests (id, name, secondary_note, venue, invitation_url, created_at, updated_at, invitation_image_front_url, invitation_image_main_url) VALUES (${values});\n`;
      }
    }

    sqlContent += `\n-- ==========================================
-- Table: rsvps
-- ==========================================

`;

    // Get RSVPs
    console.log('📦 Backing up rsvps table...');
    const rsvps = await prisma.rSVP.findMany({
      orderBy: { createdAt: 'asc' }
    });
    console.log(`   Found ${rsvps.length} RSVPs\n`);

    if (rsvps.length > 0) {
      sqlContent += `-- RSVPs data\n`;
      
      for (const rsvp of rsvps) {
        const values = [
          `'${rsvp.id}'`,
          rsvp.guestId ? `'${rsvp.guestId}'` : 'NULL',
          `'${rsvp.name.replace(/'/g, "''")}'`,
          rsvp.guestCount,
          rsvp.willAttend,
          rsvp.wishes ? `'${rsvp.wishes.replace(/'/g, "''")}'` : 'NULL',
          `'${rsvp.venue}'`,
          `'${rsvp.createdAt.toISOString()}'`,
          `'${rsvp.updatedAt.toISOString()}'`
        ].join(', ');

        sqlContent += `INSERT INTO rsvps (id, guest_id, name, guest_count, will_attend, wishes, venue, created_at, updated_at) VALUES (${values});\n`;
      }
    }

    sqlContent += `\nCOMMIT;

-- Backup Summary:
-- Guests: ${guests.length}
-- RSVPs: ${rsvps.length}
-- Total Records: ${guests.length + rsvps.length}
`;

    // Write to file
    fs.writeFileSync(filepath, sqlContent);

    console.log('✅ SQL backup completed!');
    console.log(`📁 Backup file: ${filepath}`);
    console.log('\n📊 Backup Summary:');
    console.log(`   - Guests: ${guests.length}`);
    console.log(`   - RSVPs: ${rsvps.length}`);
    console.log(`   - File size: ${(Buffer.byteLength(sqlContent) / 1024).toFixed(2)} KB`);

  } catch (error) {
    console.error('❌ Backup failed:', error.message);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

generateSQLBackup()
  .then(() => {
    console.log('\n🎉 SQL backup completed successfully!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n💥 Backup failed:', error);
    process.exit(1);
  });
